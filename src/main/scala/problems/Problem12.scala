package problems

import utils.Utils.{getDivisors, getPrimeFactorization, measure, triangularNumbersGenerator}

/**
 * 	Highly divisible triangular number
 *
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 */
object Problem12 extends App {

  def firstTriangularNumberWithNDivisors(n: Int): Int = {
    triangularNumbersGenerator.filter(getDivisors(_).length >= n).head
  }

  def firstTriangularNumberWithNDivisors2(n: Int): Int = {
    def loop (acum: Int, numbers: LazyList[Int]) : Int = {
      if (getDivisors(acum).length >= n ) acum
      else loop (acum + numbers.head, numbers.tail)
    }

    loop(1, LazyList.from(2))
  }

  def firstTriangularNumberWithNDivisors3(n: Int): Int = {
    def loop (i: Int) : Int = {
      if (getDivisors((i * (i + 1)) / 2).length >= n ) (i * (i + 1)) / 2
      else loop (i + 1)
    }

    loop(1)
  }

 // assert(measure(firstTriangularNumberWithNDivisors3(5)) == 28)
 // assert(measure(firstTriangularNumberWithNDivisors3(50)) == 25200)
 // assert(measure(firstTriangularNumberWithNDivisors3(100)) == 73920)
 // assert(measure(firstTriangularNumberWithNDivisors3(175)) == 1493856)
 // assert(measure(firstTriangularNumberWithNDivisors3(250)) == 2162160)
 // assert(measure(firstTriangularNumberWithNDivisors3(500)) == 76576500)

}
