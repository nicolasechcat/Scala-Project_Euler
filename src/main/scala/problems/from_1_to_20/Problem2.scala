package problems.from_1_to_20

import utils.Utils.measure

import scala.annotation.tailrec

/**
 * Even Fibonacci numbers
 *
 * Problem 2
 * Each new term in the Fibonacci sequence is generated by adding the
 * previous two terms. By starting with 1 and 2, the first 10 terms will
 * be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not
 * exceed four million, find the sum of the even-valued terms.
 */
object Problem2 extends App {


  def evenFibonacciSum(limit: Long): Long = {
    @tailrec
    def loop(before: Long, last: Long, r: Long): Long = {
      val next = last + before
      if (next < limit) {
        if (next % 2 == 0) {
          loop(last, next, next + r)
        } else
          loop(last, next, r)
      } else
        r
    }

    loop(0, 1, 0)
  }

  measure(evenFibonacciSum(4000000))
}
